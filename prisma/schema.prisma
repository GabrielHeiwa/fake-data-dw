generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cargos {
  id            String          @id @db.Uuid
  nome          String
  colaboradores colaboradores[]
}

model clientes {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome       String
  cpf        String    @unique
  cidade     String
  bairro     String
  estado     String
  nascimento DateTime  @db.Date
  pedidos    pedidos[]
}

model colaboradores {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome     String
  cpf      String    @unique
  cargo    String    @db.Uuid
  status   Boolean   @default(true)
  admissao DateTime  @default(now()) @db.Date
  demissao DateTime? @db.Date
  cargos   cargos    @relation(fields: [cargo], references: [id], onUpdate: Restrict)
  pedidos  pedidos[]
}

model fornecedores {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome String
  cnpj String @unique
}

model fornecedores_produtos {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  produto       String         @db.Uuid
  quantidade    Int
  preco         Decimal        @db.Decimal
  nota_fiscal   String?
  notas_fiscais notas_fiscais? @relation(fields: [nota_fiscal], references: [codigo], onDelete: Restrict, onUpdate: Restrict)
  produtos      produtos       @relation(fields: [produto], references: [id], onUpdate: Restrict)
}

model notas_fiscais {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  codigo                String                  @unique
  fornecedores_produtos fornecedores_produtos[]
  pedido_produtos       pedido_produtos[]
}

model pedido_produtos {
  id                                      String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  produto                                 String         @db.Uuid
  quantidade                              Int
  pedido                                  String         @db.Uuid
  nota_fiscal                             String?
  notas_fiscais                           notas_fiscais? @relation(fields: [nota_fiscal], references: [codigo], onDelete: Restrict, onUpdate: Restrict)
  pedidos_pedido_produtos_pedidoTopedidos pedidos        @relation("pedido_produtos_pedidoTopedidos", fields: [pedido], references: [id], onUpdate: Restrict)
  produtos                                produtos       @relation(fields: [produto], references: [id], onUpdate: Restrict)
}

model pedidos {
  id                                              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  colaborador                                     String            @db.Uuid
  cliente                                         String            @db.Uuid
  data                                            DateTime          @default(now()) @db.Date
  forma_de_pagamento                              String
  clientes                                        clientes          @relation(fields: [cliente], references: [id], onUpdate: Restrict)
  colaboradores                                   colaboradores     @relation(fields: [colaborador], references: [id], onUpdate: Restrict)
  pedido_produtos_pedido_produtos_pedidoTopedidos pedido_produtos[] @relation("pedido_produtos_pedidoTopedidos")
}

model produtos {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                  String
  preco                 Decimal                 @db.Decimal
  quantidade            Int
  fornecedores_produtos fornecedores_produtos[]
  pedido_produtos       pedido_produtos[]
}
